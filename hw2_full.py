
# coding: utf-8

# ### EASY

# In[ ]:


# Задача-1:
# Дан список фруктов.
# Напишите программу, выводящую фрукты в виде нумерованного списка,
# выровненного по правой стороне.

# Пример:
# Дано: ["яблоко", "банан", "киви", "арбуз"]
# Вывод:
# 1. яблоко
# 2.  банан
# 3.   киви
# 4.  арбуз

# Подсказка: воспользоваться методом .format()

my_fruits_basket=['apple','banana','pear','melon']
count=0
for fruit in my_fruits_basket:
    count+=1
    print('{}. {}'.format(count, fruit))


# In[ ]:


# Задача-2:
# Даны два произвольные списка.
# Удалите из первого списка элементы, присутствующие во втором списке.

list1=[2,5,67,89,7]
list2=[3,4,5,89,6]

to_delete=set(list1).intersection(list2)
list1=[item for item in list1 if item not in to_delete ]

list1


# In[ ]:


# Alternative - longer code body:
list1=[2,5,67,89,7]
list2=[3,4,5,89,6]

to_delete=set(list1).intersection(list2)
listft=[]
for item in list1:
    if item not in to_delete:
        listft.append(item)
print(listft)
        


# In[ ]:


# Задача-3:
# Дан произвольный список из целых чисел.
# Получите НОВЫЙ список из элементов исходного, выполнив следующие условия:
# если элемент кратен двум, то разделить его на 4, если не кратен, то умножить на два.

list_A=[2,3,5,6,8,9]
list_B=[]

for item in list_A:
    if item % 2 ==0:
        list_B.append(item/4)
    else:
        list_B.append(item*2)
list_B


# ### NORMAL

# In[ ]:


# Задача-1:
# Дан список, заполненный произвольными целыми числами, получите новый список,
# элементами которого будут квадратные корни элементов исходного списка,
# но только если результаты извлечения корня не имеют десятичной части и
# если такой корень вообще можно извлечь
# Пример: Дано: [2, -5, 8, 9, -25, 25, 4]   Результат: [3, 5, 2]

import math
new_list=[]

my_list=[2,-5,8,9,-25,25,4]

for item in my_list:
    if item>0:
        r=math.sqrt(item)
        if r.is_integer():
            new_list.append(int(r))
new_list


# In[ ]:


### ALTERNATIVE WAY

my_list=[2,-5,8,9,-25,25,4]
new_list=[int(math.sqrt(item)) for item in my_list if item>0 and math.sqrt(item).is_integer() ]
new_list


# In[ ]:


# Задача-2: Дана дата в формате dd.mm.yyyy, например: 02.11.2013.
# Ваша задача вывести дату в текстовом виде, например: второе ноября 2013 года.
# Склонением пренебречь (2000 года, 2010 года)

inp_date='02.11.2013'


# In[ ]:



Days = {'01':'первое','02':'второе','03':'третье','04':'четвертое','05':'пятое','06':'шестое','07':'седьмое','08':'восьмое','09':'девятое','10':'десятое','11':'одинадцатое','12':'двенадцатое', '13':'тринадцатое','14':'четырнадцатое','15':'пятьнадцатое','16':'шестьнадцатое','17':'семнадцатое','18':'восемнадцатое','19':'девятнадцатое','20':'двадцатое','21':'двадцать первое','22':'двадцать второе','23':'двадцать третье','24':'двадцать четвертое','25':'двадцать пятое','26':'двадцать шестое','27':'двадцать седьмое','28':'двадцать восьмое','29':'двадцать девятое','30':'дридцатое','31':'тридцать первое'}

Months = {'01':'января', '02':'февраля', '03':'марта', '04':'апреля', '05':'мая', '06':'июня','07':'июля', '08':'августа', '09':'сентября', '10':'октября', '11':'ноября', '12':'декабря'}

while True:
    try:
        inp_date = input('Введите дату в следующем формате dd.mm.yyyy: ').split('.')
        print('{} {} {} года.'.format(Days[inp_date[0]], (Months[inp_date[1]]), inp_date[2]))
        stop_not=input('Вы хотите продолжить? Введите "да" или "нет":  ')
        if stop_not=='нет':
            print('Спасибо! Работа завершена')
            break
        
    except KeyError:
        print('Неправильный формат даты, повторите ввод даты в заданном формате: ')
        


# In[ ]:



# Задача-3: Напишите алгоритм, заполняющий список произвольными целыми числами
# в диапазоне от -100 до 100. В списке должно быть n - элементов.
# Подсказка:
# для получения случайного числа используйте функцию randint() модуля random

import random 

n=int(input('n = '))

my_random_list=[]

for i in range(n):
    my_random_list.append(random.randint(-100,100))
print(my_random_list)


# In[ ]:


# Задача-4: Дан список, заполненный произвольными целыми числами.
# Получите новый список, элементами которого будут: 
# а) неповторяющиеся элементы исходного списка:
# например, lst = [1, 2, 4, 5, 6, 2, 5, 2], нужно получить lst2 = [1, 2, 4, 5, 6]
# б) элементы исходного списка, которые не имеют повторений:
# например, lst = [1 , 2, 4, 5, 6, 2, 5, 2], нужно получить lst2 = [1, 4, 6]

lst=[1, 2, 4, 5, 6, 2, 5, 2]
lst_2a=[]
repeated=[]

for x in lst:
    if x not in lst_2a:
        lst_2a.append(x)
    else:
        repeated.append(x)
lst_2b=list(set(lst)-set(repeated))

print('исходный список:', lst)
print('а) неповторяющиеся элементы исходного списка:',lst_2a)
print('б) элементы исходного списка, которые не имеют повторений:',lst_2b)


# ## HARD

# In[ ]:


#lesson 2-remaining exercises: hard

# Задание-1: уравнение прямой вида y = kx + b задано в виде строки.
# Определить координату y точки с заданной координатой x.

#equation = 'y = -12x + 11111140.2121'
#x = 2.5
# вычислите и выведите y

equation = 'y = -12x + 11111140.2121'

splitted=equation.replace('=','').replace('x','').replace('+','').split()

k = float(splitted[1])
x = 2.5
b = float(splitted[2])

y = k*x + b
y


# In[ ]:


#вариант решение уравнение, если необходим ввод с клавиатуры

equation = input('Введите уравнение прямой в формате y = kx + b: ')
x = float(input('x ='))
splitted=equation.replace('=','').replace('x','').replace('+','').split()

k = float(splitted[1])

b = float(splitted[2])

y = k*x + b
y


# In[ ]:


# Задание-2: Дата задана в виде строки формата 'dd.mm.yyyy'.
# Проверить, корректно ли введена дата.
# Условия корректности:
# 1. День должен приводиться к целому числу в диапазоне от 1 до 30(31)
#  (в зависимости от месяца, февраль не учитываем)
# 2. Месяц должен приводиться к целому числу в диапазоне от 1 до 12
# 3. Год должен приводиться к целому положительному числу в диапазоне от 1 до 9999
# 4. Длина исходной строки для частей должна быть в соответствии с форматом 
#  (т.е. 2 символа для дня, 2 - для месяца, 4 - для года)

# Пример корректной даты
#date = '01.11.1985'

# Примеры некорректных дат
#date = '01.22.1001'
##date = '1.12.1001'
#date = '-2.10.3001'

def valid_date(datestr):
    try:
        num = datestr.split(".")
        
        if len(num) != 3: return ('Неправильный формат даты')
        if (len(num[0]) != 2) or (len(num[1]) != 2) or (len(num[2]) != 4): return ('Неправильный формат даты')
        
        
        dd = int(num[0])
        mm = int(num[1])
        year = int(num[2])
        
        if 0<year<10000:
            if mm == 2:
                if (dd > 29): return ('Неправильный формат даты 1')
            
                #попробуем учесть високосный год
                if year % 4 != 0 or (year % 100 == 0 and year % 400 != 0):  #обычный год
                    if (mm > 29):   return ('Неправильный формат даты 2')

                else:  # високосный год

                    return ('Правильный формат даты 3')

            
            
            
            if 0<mm<2 and 2<mm<13:
                if 0<dd<31: return ('Правильный формат даты 4')
                if (dd == 31) and (mm in (1,3,5,7,8,10,12)): return ('Правильный формат даты 5')
                
        return ('Неправильный формат даты 6')
    
    except:
        return ('Неправильный формат даты 7')
    
valid_date('09.02.2000')


# In[ ]:


# Задание-3: "Перевёрнутая башня" (Задача олимпиадного уровня)
#
# Вавилонцы решили построить удивительную башню —
# расширяющуюся к верху и содержащую бесконечное число этажей и комнат.
# Она устроена следующим образом — на первом этаже одна комната,
# затем идет два этажа, на каждом из которых по две комнаты, 
# затем идёт три этажа, на каждом из которых по три комнаты и так далее:
#         ...
#     12  13  14
#     9   10  11
#     6   7   8
#       4   5
#       2   3
#         1
#
# Эту башню решили оборудовать лифтом --- и вот задача:
# нужно научиться по номеру комнаты определять,
# на каком этаже она находится и какая она по счету слева на этом этаже.
#
# Входные данные: В первой строчке задан номер комнаты N, 1 ≤ N ≤ 2 000 000 000.
#
# Выходные данные:  Два целых числа — номер этажа и порядковый номер слева на этаже.
#
# Пример:
# Вход: 13
# Выход: 6 2
#
# Вход: 11
# Выход: 5 3


# In[ ]:


# сама не додумалась, нашла развернутое объяснение и решение в гугле. разбирала от и до, не очень поняла приращение. лекции еще не прослушала, может там разбирали
room=int(input('room number: '))

box = 0 #nomer kvadrata
pos = 1 # posiciya yacheiki
etage = 1 # nomer stolbca (etaj)

while (pos+box**2)<=room:
    pos += (box * box) #pos хранит номер первой ячейки в текущем квадрате
    etage += box #Счётчик столбцов прирастает на число этих столбцов в квадрате
    box += 1 #Квадраты считаются по одному
    
    onetage = 1 #Храним приращение номера столбца внутри текущего квадрата
    
while (pos + (onetage * box)) <= room :
    pos += onetage * box #pos хранит номер первой ячейки в текущем столбце
    onetage += 1 #Увеличиваем приращение
etage += onetage - 1 #Регистрируем найденный столбец

place = 1 #Храним приращение номера ячейки в текущем столбце

while (pos + place) <= room :
    place += 1
pos += place - 1
#Вывод данных
print('\tEtage:\t%s\n\tPlace:\t%s' % (etage, place) )
print('Position in the sequence: %s' % (pos))

